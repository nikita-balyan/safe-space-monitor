🔥 Replit AI Prompt for Your Project

"You are an expert full-stack web developer. Build a complete web application with the following requirements:"

🎯 Project Goal

Create a web-based sensory regulation assistant for neurodiverse children. The app should:

Simulate sensor data (noise in dB, light in lux, motion in arbitrary units) at 1 Hz.

Send this data from the backend (Python/Flask) to the frontend via an API.

Display live sensor readings in the frontend (numerical + graphical).

Implement a basic overload detection system (threshold-based) with alerts.

Provide two interfaces:

Child view: Emoji + simple status messages (😊, 😐, 😟).

Caregiver view: Numerical values, progress bars, and charts.

Ensure the design is accessible, responsive, and simple.

🛠️ Technology Stack

Backend: Python + Flask (Replit server)

Frontend: HTML, CSS, JavaScript (Bootstrap + Chart.js)

Data Transfer: REST API endpoints (/api/current, /api/history)

Hosting: Local Replit environment (future: Vercel/Render)

📌 Backend Requirements

Generate sensor data every second:

Noise: 30–120 dB

Light: 100–10,000 lux

Motion: 0–100 units

Store last 60 seconds in memory.

Expose API endpoints:

GET /api/current → latest readings

GET /api/history → last 60 seconds of readings

Apply threshold-based overload detection:

Noise >100 dB → overload

Light >8000 lux → overload

Motion >80 units → overload

📌 Frontend Requirements

Child View:

Large emojis (😊 normal, 😐 warning, 😟 overload)

Big, simple text: “All Good”, “Be Careful”, “Overload Detected”

Caregiver View:

Live numerical values for each sensor

Progress bars (color-coded: green, orange, red)

Chart.js line graphs for last 60 seconds

Alert history panel

Toggle between Child/Caregiver view

🎨 UI & Design

Use Bootstrap for layout & responsive design

Use soft colors, large buttons, readable fonts for child mode

Professional dashboard look for caregiver mode

🚀 Expected Output

A working Flask backend that serves simulated data

A frontend dashboard (HTML/JS) fetching and displaying real-time readings

Two functional views (child + caregiver)

Overload alerts shown both as text + visuals

Responsive design working on desktop and mobile

⚡ Bonus (if possible)

Add a system status indicator (Active/Inactive)

Add option to download data (CSV export)

Smooth animations for progress bars

👉 Copy-paste this into Replit’s AI prompt window, and it will scaffold both backend + frontend code for you. Then you can refine piece by piece.